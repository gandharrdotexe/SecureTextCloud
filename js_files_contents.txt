JavaScript files in /Users/mithra707/Desktop/securetextcloud/frontend:

src/App.jsx
// Content of src/App.jsx:
// import { useState } from 'react'
// import reactLogo from './assets/react.svg'
// import viteLogo from '/vite.svg'
// import './App.css'

// function App() {
//   const [count, setCount] = useState(0)

//   return (
//     <>
//       <h1 className="text-3xl font-bold underline">
//       Hello world!
//     </h1>
//     </>
//   )
// }

// export default App

// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// import MessageEncryptor from "@/components/pages-modules/message-encrypter";
// import MessageDecryptor from "@/components/pages-modules/message-decrypter";

// export default function App() {
//   return (
//     <main className="flex min-h-screen flex-col items-center justify-center p-4 overflow-y-auto no-scrollbar md:p-24">
//       <div className="w-full max-w-3xl mx-auto space-y-6">
//         <div className="text-center space-y-2">
//           <h1 className="text-3xl font-bold tracking-tight">SecureTextCloud</h1>
//           <p className="text-muted-foreground">Securely share encrypted messages with end-to-end encryption</p>
//         </div>

//         <Tabs defaultValue="encrypt" className="w-full">
//           <TabsList className="grid w-full grid-cols-2">
//             <TabsTrigger value="encrypt">Encrypt & Send</TabsTrigger>
//             <TabsTrigger value="decrypt">Fetch & Decrypt</TabsTrigger>
//           </TabsList>
//           <TabsContent value="encrypt">
//             <MessageEncryptor />
//           </TabsContent>
//           <TabsContent value="decrypt">
//             <MessageDecryptor />
//           </TabsContent>
//         </Tabs>
//       </div>
//     </main>
//   );
// }

// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// import { Button } from "@/components/ui/button";
// import { toast } from "@/components/ui/use-toast";
// import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
// import { Alert, AlertDescription } from "@/components/ui/alert";  
// import MessageEncryptor from "@/components/pages-modules/message-encrypter";
// import MessageDecryptor from "@/components/pages-modules/message-decrypter";

// export default function App() {
//   return (
//     <main className="flex flex-col items-center p-4 md:p-8"> {/* Reduced padding-top */}
//       <div className="w-full max-w-3xl mx-auto space-y-4"> {/* Reduced space-y */}
//         <div className="text-center space-y-1"> {/* Reduced space-y */}
//           <h1 className="text-3xl font-bold tracking-tight">SecureTextCloud</h1>
//           <p className="text-muted-foreground">Securely share encrypted messages with end-to-end encryption</p>
//         </div>

//         <Tabs defaultValue="encrypt" className="w-full mt-2"> {/* Added small margin-top */}
//           <TabsList className="grid w-full grid-cols-2">
//             <TabsTrigger value="encrypt">Encrypt & Send</TabsTrigger>
//             <TabsTrigger value="decrypt">Fetch & Decrypt</TabsTrigger>
//           </TabsList>
//           <TabsContent value="encrypt">
//             <MessageEncryptor />
//           </TabsContent>
//           <TabsContent value="decrypt">
//             <MessageDecryptor />
//           </TabsContent>
//         </Tabs>
//       </div>

//       <Button onClick={() => toast({ title: "Test Toast" })}>
//   Test Toast
// </Button>
//     </main>
//   );
// }


import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";  
import { Toaster } from "@/components/ui/toaster";
import MessageEncryptor from "@/components/pages-modules/message-encrypter";
import MessageDecryptor from "@/components/pages-modules/message-decrypter";

export default function App() {
  const { toast } = useToast();

  return (
    <>
      <main className="flex flex-col items-center p-4 md:p-8">
        <div className="w-full max-w-3xl mx-auto space-y-4">
          <div className="text-center space-y-1">
            <h1 className="text-3xl font-bold tracking-tight">SecureTextCloud</h1>
            <p className="text-muted-foreground">Securely share encrypted messages with end-to-end encryption</p>
          </div>

          <Tabs defaultValue="encrypt" className="w-full mt-2">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="encrypt">Encrypt & Send</TabsTrigger>
              <TabsTrigger value="decrypt">Fetch & Decrypt</TabsTrigger>
            </TabsList>
            <TabsContent value="encrypt">
              <MessageEncryptor />
            </TabsContent>
            <TabsContent value="decrypt">
              <MessageDecryptor />
            </TabsContent>
          </Tabs>
        </div>

        
      </main>
      
      {/* Add Toaster at the root level */}
      <Toaster />
    </>
  );
}

src/main.jsx
// Content of src/main.jsx:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


src/components/pages-modules/message-decrypter.jsx
// Content of src/components/pages-modules/message-decrypter.jsx:
"use client"

import { useState } from "react"
import axios from "axios"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"
import { decryptMessage } from "@/lib/crypto-service"
import { useToast } from "@/hooks/use-toast"

const API_BASE_URL = "http://16.171.250.242:5003"

export default function MessageDecryptor() {
  const [messageId, setMessageId] = useState("")
  const [secretKey, setSecretKey] = useState("")
  const [encryptedMessage, setEncryptedMessage] = useState(null)
  const [decryptedMessage, setDecryptedMessage] = useState(null)
  const [loading, setLoading] = useState(false)
  const [fetchLoading, setFetchLoading] = useState(false)
  const [error, setError] = useState(null)
  const { toast } = useToast()

  const handleFetchMessage = async () => {
    if (!messageId.trim()) {
      setError("Please enter a message ID")
      return
    }

    try {
      setFetchLoading(true)
      setError(null)
      setEncryptedMessage(null)
      setDecryptedMessage(null)

      const response = await axios.get(`${API_BASE_URL}/api/messages/${messageId}`)

      if (response.data) {
        setEncryptedMessage({
          encryptedMessage: response.data.encryptedMessage,
          iv: response.data.iv,
          salt: response.data.salt,
        })
        toast({
          title: "Message retrieved",
          description: "Enter your secret key to decrypt the message",
        })
      } else {
        setError("Message not found. Please check the ID and try again.")
      }
    } catch (err) {
      console.error("Error fetching message:", err)
      setError("Failed to fetch message. Please check the ID and try again.")
    } finally {
      setFetchLoading(false)
    }
  }

  const handleDecrypt = async () => {
    if (!encryptedMessage) {
      setError("No encrypted message to decrypt")
      return
    }

    if (!secretKey.trim()) {
      setError("Please enter a secret key")
      return
    }

    try {
      setLoading(true)
      setError(null)

      const decrypted = await decryptMessage(
        encryptedMessage.encryptedMessage,
        secretKey,
        encryptedMessage.iv,
        encryptedMessage.salt,
      )

      setDecryptedMessage(decrypted)
      toast({
        title: "Message decrypted",
        description: "The message has been successfully decrypted",
      })
    } catch (err) {
      console.error("Error decrypting message:", err)
      setError("Failed to decrypt message. Please check your secret key and try again.")
    } finally {
      setLoading(false)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Fetch & Decrypt Message</CardTitle>
        <CardDescription>Enter a message ID to fetch and decrypt it with your shared secret key</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label htmlFor="messageId" className="text-sm font-medium">
            Message ID
          </label>
          <div className="flex space-x-2">
            <Input
              id="messageId"
              placeholder="Enter the message ID"
              value={messageId}
              onChange={(e) => setMessageId(e.target.value)}
            />
            <Button onClick={handleFetchMessage} disabled={fetchLoading} className="shrink-0">
              {fetchLoading ? "Fetching..." : "Fetch"}
            </Button>
          </div>
        </div>

        {encryptedMessage && (
          <>
            <div className="space-y-2">
              <label htmlFor="secretKey" className="text-sm font-medium">
                Secret Key
              </label>
              <Input
                id="secretKey"
                type="password"
                placeholder="Enter your shared secret key"
                value={secretKey}
                onChange={(e) => setSecretKey(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Button onClick={handleDecrypt} disabled={loading} className="w-full">
                {loading ? "Decrypting..." : "Decrypt Message"}
              </Button>
            </div>
          </>
        )}

        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {decryptedMessage && (
          <div className="space-y-2">
            <label className="text-sm font-medium">Decrypted Message</label>
            <div className="p-4 border rounded-md bg-muted/50">
              <p className="whitespace-pre-wrap">{decryptedMessage}</p>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

src/components/pages-modules/message-encrypter.jsx
// Content of src/components/pages-modules/message-encrypter.jsx:
"use client"

import { useState } from "react"
import axios from "axios"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Copy, Check, AlertCircle } from "lucide-react"
import { encryptMessage } from "@/lib/crypto-service"
import { useToast } from "@/hooks/use-toast"

const API_BASE_URL = "http://16.171.250.242:5003"

export default function MessageEncryptor() {
  const [message, setMessage] = useState("")
  const [secretKey, setSecretKey] = useState("")
  const [messageId, setMessageId] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [copied, setCopied] = useState(false)
  const { toast } = useToast()

  const handleEncryptAndSend = async () => {
    if (!message.trim()) {
      setError("Please enter a message to encrypt")
      return
    }

    if (!secretKey.trim()) {
      setError("Please enter a secret key")
      return
    }

    try {
      setLoading(true)
      setError(null)

      const encryptedData = await encryptMessage(message, secretKey)

      const response = await axios.post(`${API_BASE_URL}/api/messages`, {
        encryptedMessage: encryptedData.encryptedMessage,
        iv: encryptedData.iv,
        salt: encryptedData.salt,
      })

      setMessageId(response.data.messageId)
      toast({
        title: "Message encrypted and stored",
        description: "Share the message ID with the recipient",
      })
      console.log("Message ID:", response.data.messageId);
    } catch (err) {
      console.error("Error encrypting or sending message:", err)
      setError("Failed to encrypt or send message. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = () => {
    if (messageId) {
      navigator.clipboard.writeText(messageId)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Encrypt & Send Message</CardTitle>
        <CardDescription>Enter your message and a shared secret key to encrypt and send it</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label htmlFor="message" className="text-sm font-medium">
            Message
          </label>
          <Textarea
            id="message"
            placeholder="Enter your secret message here..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            rows={5}
          />
        </div>
        <div className="space-y-2">
          <label htmlFor="secretKey" className="text-sm font-medium">
            Secret Key
          </label>
          <Input
            id="secretKey"
            type="password"
            placeholder="Enter your shared secret key"
            value={secretKey}
            onChange={(e) => setSecretKey(e.target.value)}
          />
          <p className="text-xs text-muted-foreground">
            This key will be used to encrypt your message. The recipient will need the same key to decrypt it.
          </p>
        </div>

        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {messageId && (
          <Alert>
            <div className="flex justify-between items-center w-full">
              <div>
                <p className="font-medium">Message ID:</p>
                <p className="text-sm font-mono">{messageId}</p>
              </div>
              <Button variant="outline" size="icon" onClick={copyToClipboard} className="h-8 w-8">
                {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
              </Button>
            </div>
          </Alert>
        )}
      </CardContent>
      <CardFooter>
        <Button onClick={handleEncryptAndSend} disabled={loading} className="w-full">
          {loading ? "Processing..." : "Encrypt & Send"}
        </Button>
      </CardFooter>
    </Card>
  )
}

src/components/ui/alert.jsx
// Content of src/components/ui/alert.jsx:
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


src/components/ui/button.jsx
// Content of src/components/ui/button.jsx:
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }


src/components/ui/card.jsx
// Content of src/components/ui/card.jsx:
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


src/components/ui/input.jsx
// Content of src/components/ui/input.jsx:
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Input.displayName = "Input"

export { Input }


src/components/ui/tabs.jsx
// Content of src/components/ui/tabs.jsx:
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props} />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props} />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props} />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


src/components/ui/textarea.jsx
// Content of src/components/ui/textarea.jsx:
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Textarea.displayName = "Textarea"

export { Textarea }


src/components/ui/toast.jsx
// Content of src/components/ui/toast.jsx:
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props} />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props} />
  );
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props} />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}>
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

export { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };


src/components/ui/toaster.jsx
// Content of src/components/ui/toaster.jsx:
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}


